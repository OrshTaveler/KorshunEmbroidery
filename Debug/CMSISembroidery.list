
CMSISembroidery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  4 .ARM          00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000308  08000308  00010308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800030c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800030c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000059d  00000000  00000000  00010335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002fb  00000000  00000000  000108d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001007e  00000000  00000000  00010ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ead  00000000  00000000  00020d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054443  00000000  00000000  00021c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00076056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000144  00000000  00000000  000760a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080002ec 	.word	0x080002ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080002ec 	.word	0x080002ec

0800014c <PortSetHi>:
#include "main.h"
#include "rccconfig.h"


void PortSetHi(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  GPIOC->BSRR = (1<<13);
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <PortSetHi+0x14>)
 8000152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000156:	611a      	str	r2, [r3, #16]
}
 8000158:	bf00      	nop
 800015a:	46bd      	mov	sp, r7
 800015c:	bc80      	pop	{r7}
 800015e:	4770      	bx	lr
 8000160:	40011000 	.word	0x40011000

08000164 <PortSetLow>:
void PortSetLow(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
  GPIOC->BRR = (1<<13);
 8000168:	4b03      	ldr	r3, [pc, #12]	; (8000178 <PortSetLow+0x14>)
 800016a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800016e:	615a      	str	r2, [r3, #20]
}
 8000170:	bf00      	nop
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	40011000 	.word	0x40011000

0800017c <main>:


int main(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
	 configRcc();
 8000182:	f000 f81b 	bl	80001bc <configRcc>
	 configGPIO();
 8000186:	f000 f841 	bl	800020c <configGPIO>

	  int i;

	  for(;;)
	  {
	    PortSetHi();
 800018a:	f7ff ffdf 	bl	800014c <PortSetHi>
	    for(i=0; i<0x4000; i++)
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e002      	b.n	800019a <main+0x1e>
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001a0:	dbf8      	blt.n	8000194 <main+0x18>
	      ;
	    PortSetLow();
 80001a2:	f7ff ffdf 	bl	8000164 <PortSetLow>
	    for(i=0; i<0x4000; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e002      	b.n	80001b2 <main+0x36>
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001b8:	dbf8      	blt.n	80001ac <main+0x30>
	    PortSetHi();
 80001ba:	e7e6      	b.n	800018a <main+0xe>

080001bc <configRcc>:
#include "rccconfig.h"

int configRcc(){
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0


	  RCC->CR |= (1<<RCC_CR_HSION_Pos); //Запускаем генератор HSI
 80001c0:	4b11      	ldr	r3, [pc, #68]	; (8000208 <configRcc+0x4c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a10      	ldr	r2, [pc, #64]	; (8000208 <configRcc+0x4c>)
 80001c6:	f043 0301 	orr.w	r3, r3, #1
 80001ca:	6013      	str	r3, [r2, #0]

	  //Делители
	  RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <configRcc+0x4c>)
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <configRcc+0x4c>)
 80001d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80001d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001da:	6053      	str	r3, [r2, #4]

	  RCC->CFGR &= ~RCC_CFGR_SW;
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <configRcc+0x4c>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	4a09      	ldr	r2, [pc, #36]	; (8000208 <configRcc+0x4c>)
 80001e2:	f023 0303 	bic.w	r3, r3, #3
 80001e6:	6053      	str	r3, [r2, #4]
	  RCC->CFGR |= (0x00<<RCC_CFGR_SW_Pos); //Переключаемся на работу от HSI
 80001e8:	4b07      	ldr	r3, [pc, #28]	; (8000208 <configRcc+0x4c>)
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <configRcc+0x4c>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	6053      	str	r3, [r2, #4]

	  //Ждем, пока переключимся
	  while((RCC->CFGR & RCC_CFGR_SWS_Msk) != (0x00<<RCC_CFGR_SWS_Pos))
 80001f0:	bf00      	nop
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <configRcc+0x4c>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	f003 030c 	and.w	r3, r3, #12
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d1f9      	bne.n	80001f2 <configRcc+0x36>
	  {
	  }
	  return 0;
 80001fe:	2300      	movs	r3, #0
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	40021000 	.word	0x40021000

0800020c <configGPIO>:

void configGPIO(){
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	// Enable clocking of GPIOC
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <configGPIO+0x38>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <configGPIO+0x38>)
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6193      	str	r3, [r2, #24]

	// Seting CRH to all 0
	GPIOC->CRH &= ~(GPIO_CRH_CNF13 | GPIO_CRH_MODE13);
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <configGPIO+0x3c>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <configGPIO+0x3c>)
 8000222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000226:	6053      	str	r3, [r2, #4]
	// Setting CRH 13 to output with max frequency of 10 MHz
	GPIOC->CRH |= (0b01 << GPIO_CRH_MODE13_Pos) | (0b0 << GPIO_CRH_CNF13_Pos);
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <configGPIO+0x3c>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <configGPIO+0x3c>)
 800022e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000232:	6053      	str	r3, [r2, #4]

	GPIOC->BRR = (1<<13);
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <configGPIO+0x3c>)
 8000236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800023a:	615a      	str	r2, [r3, #20]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	40021000 	.word	0x40021000
 8000248:	40011000 	.word	0x40011000

0800024c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	; (8000290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	; (800029c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800027e:	f7ff ffe5 	bl	800024c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000282:	f000 f80f 	bl	80002a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ff79 	bl	800017c <main>
  bx lr
 800028a:	4770      	bx	lr
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	0800030c 	.word	0x0800030c
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC1_2_IRQHandler>
	...

080002a4 <__libc_init_array>:
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	2600      	movs	r6, #0
 80002a8:	4d0c      	ldr	r5, [pc, #48]	; (80002dc <__libc_init_array+0x38>)
 80002aa:	4c0d      	ldr	r4, [pc, #52]	; (80002e0 <__libc_init_array+0x3c>)
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	10a4      	asrs	r4, r4, #2
 80002b0:	42a6      	cmp	r6, r4
 80002b2:	d109      	bne.n	80002c8 <__libc_init_array+0x24>
 80002b4:	f000 f81a 	bl	80002ec <_init>
 80002b8:	2600      	movs	r6, #0
 80002ba:	4d0a      	ldr	r5, [pc, #40]	; (80002e4 <__libc_init_array+0x40>)
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <__libc_init_array+0x44>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	42a6      	cmp	r6, r4
 80002c4:	d105      	bne.n	80002d2 <__libc_init_array+0x2e>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002cc:	4798      	blx	r3
 80002ce:	3601      	adds	r6, #1
 80002d0:	e7ee      	b.n	80002b0 <__libc_init_array+0xc>
 80002d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d6:	4798      	blx	r3
 80002d8:	3601      	adds	r6, #1
 80002da:	e7f2      	b.n	80002c2 <__libc_init_array+0x1e>
 80002dc:	08000304 	.word	0x08000304
 80002e0:	08000304 	.word	0x08000304
 80002e4:	08000304 	.word	0x08000304
 80002e8:	08000308 	.word	0x08000308

080002ec <_init>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr

080002f8 <_fini>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr
